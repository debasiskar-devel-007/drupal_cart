<?php
/**
 * Created by PhpStorm.
 * User: debasis
 * Date: 16/6/15
 * Time: 12:04 AM
 */

function custome_register_user_init() // init function called by defaulted when this module loaded by system
{
    echo 90;
    echo $GLOBALS['theme'];




}


function custome_register_user_enable()
{
    //echo 87;
// Check if our field is not already created.
    if (!field_info_field('user_first_name')) {

        // Create the field base.
        $field = array(
            'field_name' => 'user_first_name',
            'type' => 'text',
        );
        field_create_field($field);

        // Create the field instance on the bundle.
        $instance = array(
            'field_name' => 'user_first_name',
            'entity_type' => 'user',
            'label' => 'First Name',
            'bundle' => 'user',
            // If you don't set the "required" property then the field wont be required by default.
            'required' => TRUE,
            'settings' => array(
                // Here you inform either or not you want this field showing up on the registration form.
                'user_register_form' => 1,
            ),
            'widget' => array(
                'type' => 'textfield',
                'weight' => '-60',
            ),
        );
        field_create_instance($instance);
    }
}


function ife_errors($op = 'get', $id = NULL, $message = NULL) {
    static $errors = array();

    switch ($op) {
        case 'get':
            // Return given element error if id is provided.
            if (isset($id) && isset($errors[$id])) {
                return $errors[$id];
            }
            break;
        case 'set';
            $errors[$id] = $message;
            break;
    }
}


function custome_register_user_preprocess_form_element3($variables) {
    echo 76;
    //exit;
    $output = '';



    $output = $variables['element']['#children'];
    //echo $variables['element']['#name'];


    if(is_array(form_get_errors())){



        if (array_key_exists($variables['element']['#name'],form_get_errors())) {
            $errors=form_get_errors();
            //echo 92;
            $output .= '<div class="messages error messages-inline">' . $errors[$variables['element']['#name']] . '</div>';
        }
    }
    //echo ($output);
    //exit;
    $vars['attributes']['class'][] = 'another-class';

   // return theme_form_element($variables)."<div>48</div>";
}


function custome_register_user_disable() {

    if (field_info_field('user_first_name')) {

        // Create the field base.
        $field = array(
            'field_name' => 'user_first_name',
            'type' => 'text',
        );
        field_delete_field($field);
    }

}


function custome_register_user_user_register_form_validate($form, &$form_state) {
    echo 98;
    exit;
    drupal_set_message("validating...");

    form_set_error("description", "There is an error here!!!!");
    form_set_error("tags", "Yep, and here too!!!");

    $reset_errors = custome_register_user_errors_reset( $form );

    drupal_set_message( "<pre>" . print_r( $reset_errors, true ) . "</pre>" );
}

function custome_register_user_errors_reset( $element ) {
    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += MODULE_errors_reset( $element[ $key ] );
        }
    }

    // Check for errors and settings
    $errors = form_get_errors();
    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;
}

// If there are no form errors, we still hit here, even after the 'reset', this is
// a good thing.
function custome_register_user_user_register_form_submit( $form, &$form_submit ) {
    drupal_set_message("submited!");
}
/*function custome_register_user_theme(&$existing, $type,$theme, $path)
{
    $hooks= array();
    $hooks['user_register_form']=array(
        'render element'=>'form',
        'path'=>drupal_get_path('theme',$GLOBALS['theme']),
        'template'=>'user-register',
        'preprocess functions' => array('custome_register_user_preprocess_user_register_form'),

    );

    return $hooks;


}*/


/*function custome_register_user_form_user_register_form_alter($form, &$form_state, $form_id)
{
    //echo 87;
    //exit;
    //array_unshift($form['#validate'], 'custome_register_user_user_register_form_validate');
    $form['#validate'][] = 'custome_register_user_user_register_form_validate';

}*/




function custome_register_user_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'user_register_form') {
        //echo 84;
        //$form['#validate'][] = 'MYMODULE_user_register_form_validate';
    }
}

/**
 * Additional handler for user_register_form form validation.
 */
function MYMODULE_user_register_form_validate($form, &$form_state) {
    //echo 65;
    //exit;
    drupal_set_message("validating...");

    //form_set_error("description", "There is an error here!!!!");
    //form_set_error("tags", "Yep, and here too!!!");

    $reset_errors = custome_register_user_errors_reset( $form );

    drupal_set_message( "<pre>" . print_r( $reset_errors, true ) . "</pre>" );
}
